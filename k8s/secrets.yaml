# IMPORTANT: This is a template file. Do NOT commit actual secrets to version control.
# In production, use external secret management like:
# - Kubernetes External Secrets Operator
# - HashiCorp Vault
# - AWS Secrets Manager
# - Azure Key Vault
# - Google Secret Manager

apiVersion: v1
kind: Secret
metadata:
  name: brain-forge-secrets
  namespace: brain-forge
  labels:
    app.kubernetes.io/name: brain-forge
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database credentials
  DATABASE_USER: "brain_forge_user"
  DATABASE_PASSWORD: "REPLACE_WITH_SECURE_PASSWORD"
  DATABASE_URL: "postgresql://brain_forge_user:REPLACE_WITH_SECURE_PASSWORD@postgres-service:5432/brain_forge"
  
  # Redis credentials
  REDIS_PASSWORD: "REPLACE_WITH_REDIS_PASSWORD"
  REDIS_URL: "redis://:REPLACE_WITH_REDIS_PASSWORD@redis-service:6379"
  
  # JWT configuration
  JWT_SECRET_KEY: "REPLACE_WITH_SECURE_JWT_SECRET_256_BITS"
  JWT_ALGORITHM: "HS256"
  
  # Encryption keys (must be 32 bytes base64 encoded)
  ENCRYPTION_KEY: "REPLACE_WITH_32_BYTE_BASE64_ENCRYPTION_KEY"
  
  # API keys for external services
  OPENAI_API_KEY: "REPLACE_WITH_OPENAI_API_KEY"
  
  # SSL certificates (if not using cert-manager)
  TLS_CERT: ""
  TLS_KEY: ""

---
# Template for generating secure secrets
# Run this command to generate secure values:
# 
# kubectl create secret generic brain-forge-secrets \
#   --namespace=brain-forge \
#   --from-literal=DATABASE_PASSWORD=$(openssl rand -base64 32) \
#   --from-literal=REDIS_PASSWORD=$(openssl rand -base64 32) \
#   --from-literal=JWT_SECRET_KEY=$(openssl rand -base64 64) \
#   --from-literal=ENCRYPTION_KEY=$(openssl rand -base64 32) \
#   --dry-run=client -o yaml | kubectl apply -f -
